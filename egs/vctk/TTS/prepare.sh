#!/usr/bin/env bash

# fix segmentation fault reported in https://github.com/k2-fsa/icefall/issues/674
export PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python

set -eou pipefail

nj=1
stage=-1
stop_stage=100

dl_dir=$PWD/download

. shared/parse_options.sh || exit 1

# All files generated by this script are saved in "data".
# You can safely remove "data" and rerun this script to regenerate it.
mkdir -p data

log() {
  # This function is from espnet
  local fname=${BASH_SOURCE[1]##*/}
  echo -e "$(date '+%Y-%m-%d %H:%M:%S') (${fname}:${BASH_LINENO[0]}:${FUNCNAME[1]}) $*"
}

log "dl_dir: $dl_dir"

if [ $stage -le 0 ] && [ $stop_stage -ge 0 ]; then
  log "Stage 0: Download data"

  # If you have pre-downloaded it to /path/to/VCTK,
  # you can create a symlink
  #
  #   ln -sfv /path/to/VCTK $dl_dir/VCTK
  #
  if [ ! -d $dl_dir/VCTK ]; then
    lhotse download vctk $dl_dir
  fi
fi

if [ $stage -le 1 ] && [ $stop_stage -ge 1 ]; then
  log "Stage 1: Prepare VCTK manifest"
  # We assume that you have downloaded the VCTK corpus
  # to $dl_dir/VCTK
  mkdir -p data/manifests
  if [ ! -e data/manifests/.vctk.done ]; then
    lhotse prepare vctk --use-edinburgh-vctk-url true $dl_dir/VCTK data/manifests
    touch data/manifests/.vctk.done
  fi
fi

if [ $stage -le 2 ] && [ $stop_stage -ge 2 ]; then
  log "Stage 2: Compute spectrogram for VCTK"
  mkdir -p data/spectrogram
  if [ ! -e data/spectrogram/.vctk.done ]; then
    ./local/compute_spectrogram_vctk.py
    touch data/spectrogram/.vctk.done
  fi

  if [ ! -e data/spectrogram/.vctk-validated.done ]; then
    log "Validating data/fbank for VCTK"
    ./local/validate_manifest.py \
      data/spectrogram/vctk_cuts_all.jsonl.gz
    touch data/spectrogram/.vctk-validated.done
  fi
fi

if [ $stage -le 3 ] && [ $stop_stage -ge 3 ]; then
  log "Stage 3: Split the VCTK cuts into train, valid and test sets"
  if [ ! -e data/spectrogram/.vctk_split.done ]; then
    lhotse subset --last 600 \
      data/spectrogram/vctk_cuts_all.jsonl.gz \
      data/spectrogram/vctk_cuts_validtest.jsonl.gz
    lhotse subset --first 100 \
      data/spectrogram/vctk_cuts_validtest.jsonl.gz \
      data/spectrogram/vctk_cuts_valid.jsonl.gz
    lhotse subset --last 500 \
      data/spectrogram/vctk_cuts_validtest.jsonl.gz \
      data/spectrogram/vctk_cuts_test.jsonl.gz

    rm data/spectrogram/vctk_cuts_validtest.jsonl.gz

    n=$(( $(gunzip -c data/spectrogram/vctk_cuts_all.jsonl.gz | wc -l) - 600 ))
    lhotse subset --first $n  \
      data/spectrogram/vctk_cuts_all.jsonl.gz \
      data/spectrogram/vctk_cuts_train.jsonl.gz
      touch data/spectrogram/.vctk_split.done
  fi
fi

if [ $stage -le 4 ] && [ $stop_stage -ge 4 ]; then
  log "Stage 4: Generate token file"
  if [ ! -e data/tokens.txt ]; then
    ./local/prepare_token_file.py \
      --manifest-file data/spectrogram/vctk_cuts_train.jsonl.gz \
      --tokens data/tokens.txt
  fi
fi


